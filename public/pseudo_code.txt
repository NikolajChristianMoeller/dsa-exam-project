

(INITIALISERINGEN)
1. Argumenter for forståelse:
   W[] = array af vægte
   V[] = array af værdier
   C = den maximale kapacitet tasken kan holde
   

knapsack(C, W, V) {

    Tjek at W, V og C >= 0
    Tjek at W.length == V.length


2. Definer antal objekter 
	 N = W.length

3. Definér gridet:
   DP[][] = [W.length + 1][C + 1]


(UDFYLD GRIDET)
for( hver objekt fra 1 til N) {
	w = W[i-1]
	v = V[i-1]

	for(hver kapacitet fra 1 til C )  {
	
		Sæt nuværende værdi til forrige værdi i samme kolonne.
		DP[i][sz] = DP[i-1][sz]
		
		if(sz >= w && DP[i-1][sz - nuværrende vægt] + nuværende værdi  > DP[i][sz]) {
		sæt værdien af nuværende celle tol st indeholde det det forrige objekts værdi + nuværende obj værdi
			sæt DP[i][sz] = DP[i-1][sz-w] +v
		}
	
	  }
	}


(BACKTRACKING FOR AT FINDE VALGTE OBJEKTER)
let sz = C
let itemsAdded = [] 
for( let i = antal objekter; i> 0; i--) {
if(DP[i][sz] != DP[i-1][sz]){
		gem/tilføj objektet(i) i itemsAdded tasken
		Fjern objektets vægt W[i] fra taskens capacitet C

	}
}

Returner itemsAdded eller den samlede værdi DP[N][C]
}



 knapsack(Capacity, Weight, Value)