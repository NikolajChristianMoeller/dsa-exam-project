1. (INITIALISERINGEN)

Argumenter for forståelse
W[] = array af vægte weightArr
V[] = array af værdier valueArr
C = den maximale kapacitet tasken kan holde maxCapacity

knapsack() {

Definer antal objekter 
N = W.length 					

Definér gridet
DP[][] = [N][C]	

2. (UDFYLD GRIDET)
for (hver objekt fra 1 til N) {
	gemmer værdi og vægt for nuværende objekt					
	for (hver kapacitet fra 1 til C) {
		Sæt nuværende værdi til forrige værdi i samme kolonne.
		if(nuværende kapacitet >= nuværende vægt og forrige objekts værdi + nuværende værdi > nuværende objekts værdi) {
		sæt nuværende celles værdi = forrige objekts værdi + nuværende objekts værdi
		}
	}
}

3. (BACKTRACKING FOR AT FINDE VALGTE OBJEKTER)
 itemsAddedArr = []

	iterer fra sidste objekt til første objekt {
		if(nuværende objekts værdi ikke er ligmed forrige objekts værdi)  {
		gem/tilføj objektet(i) i itemsAdded tasken
		Fjern objektets vægt fra C
		}
		returner itemsAddedArr 
	}
	Returner itemsAddedArr 
}





DP - Knapsack

const 2Darr

	for Obj af 2Darr
		for vægt af Obj
	ny værdi: (2Darr[O][V]) = Objektets værdi
	gl værdi: = 2Darr[O - 1][V]
	samlet værdi = 2D[O][V] + 2D[O - 1][V - Objektets værdi]
		if (samlet værdi > gl. værdi)
			ny værdi = samlet værdi
		else
			ny værdi = gl værdi

Backtracking

V = Max Vægt
O = Sidste Objekt

	While O > 0

	if  2DArr[O][V]  != 2DArr[O - 1][V]
	{ 
		“Indkluder objektet i tasken” 

	V = V - Objekt.Vægt 
	}
	O = O - 1
